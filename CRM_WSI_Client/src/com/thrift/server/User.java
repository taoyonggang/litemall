/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-04-17")
public class User implements org.apache.thrift.TBase<User, User._Fields>, java.io.Serializable, Cloneable, Comparable<User> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("User");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("birthday", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoginTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoginIp", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField USER_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("userLevel", org.apache.thrift.protocol.TType.BYTE, (short)9);
  private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickname", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField AVATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("avatar", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField WEIXIN_OPENID_FIELD_DESC = new org.apache.thrift.protocol.TField("weixinOpenid", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.BYTE, (short)14);
  private static final org.apache.thrift.protocol.TField ADD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("addTime", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField INTEGRAL_FIELD_DESC = new org.apache.thrift.protocol.TField("integral", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField GRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("grade", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField FROMSOUCE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromsouce", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField BABYBIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("babybirthday", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField BABYBIRTHDAY2_FIELD_DESC = new org.apache.thrift.protocol.TField("babybirthday2", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField BABYSEX_FIELD_DESC = new org.apache.thrift.protocol.TField("babysex", org.apache.thrift.protocol.TType.BYTE, (short)23);
  private static final org.apache.thrift.protocol.TField BABYSEX2_FIELD_DESC = new org.apache.thrift.protocol.TField("babysex2", org.apache.thrift.protocol.TType.BYTE, (short)24);
  private static final org.apache.thrift.protocol.TField MEMBER_USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("memberUsername", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("company_id", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("user_type", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField ORIGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("origin", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("province", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("area", org.apache.thrift.protocol.TType.STRING, (short)31);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserTupleSchemeFactory();

  public int id; // required
  public @org.apache.thrift.annotation.Nullable String username; // optional
  public @org.apache.thrift.annotation.Nullable String password; // optional
  public byte gender; // optional
  public @org.apache.thrift.annotation.Nullable String birthday; // optional
  public @org.apache.thrift.annotation.Nullable String lastLoginTime; // optional
  public @org.apache.thrift.annotation.Nullable String lastLoginIp; // optional
  public byte userLevel; // optional
  public @org.apache.thrift.annotation.Nullable String nickname; // optional
  public @org.apache.thrift.annotation.Nullable String mobile; // optional
  public @org.apache.thrift.annotation.Nullable String avatar; // optional
  public @org.apache.thrift.annotation.Nullable String weixinOpenid; // optional
  public byte status; // optional
  public @org.apache.thrift.annotation.Nullable String addTime; // optional
  public @org.apache.thrift.annotation.Nullable String updateTime; // optional
  public int integral; // optional
  public int grade; // optional
  public @org.apache.thrift.annotation.Nullable String fromsouce; // optional
  public @org.apache.thrift.annotation.Nullable String address; // optional
  public @org.apache.thrift.annotation.Nullable String babybirthday; // optional
  public @org.apache.thrift.annotation.Nullable String babybirthday2; // optional
  public byte babysex; // optional
  public byte babysex2; // optional
  public @org.apache.thrift.annotation.Nullable String memberUsername; // optional
  public int company_id; // optional
  public @org.apache.thrift.annotation.Nullable String user_type; // optional
  public @org.apache.thrift.annotation.Nullable String origin; // optional
  public @org.apache.thrift.annotation.Nullable String province; // optional
  public @org.apache.thrift.annotation.Nullable String city; // optional
  public @org.apache.thrift.annotation.Nullable String area; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    USERNAME((short)2, "username"),
    PASSWORD((short)3, "password"),
    GENDER((short)4, "gender"),
    BIRTHDAY((short)5, "birthday"),
    LAST_LOGIN_TIME((short)7, "lastLoginTime"),
    LAST_LOGIN_IP((short)8, "lastLoginIp"),
    USER_LEVEL((short)9, "userLevel"),
    NICKNAME((short)10, "nickname"),
    MOBILE((short)11, "mobile"),
    AVATAR((short)12, "avatar"),
    WEIXIN_OPENID((short)13, "weixinOpenid"),
    STATUS((short)14, "status"),
    ADD_TIME((short)15, "addTime"),
    UPDATE_TIME((short)16, "updateTime"),
    INTEGRAL((short)17, "integral"),
    GRADE((short)18, "grade"),
    FROMSOUCE((short)19, "fromsouce"),
    ADDRESS((short)20, "address"),
    BABYBIRTHDAY((short)21, "babybirthday"),
    BABYBIRTHDAY2((short)22, "babybirthday2"),
    BABYSEX((short)23, "babysex"),
    BABYSEX2((short)24, "babysex2"),
    MEMBER_USERNAME((short)25, "memberUsername"),
    COMPANY_ID((short)26, "company_id"),
    USER_TYPE((short)27, "user_type"),
    ORIGIN((short)28, "origin"),
    PROVINCE((short)29, "province"),
    CITY((short)30, "city"),
    AREA((short)31, "area");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USERNAME
          return USERNAME;
        case 3: // PASSWORD
          return PASSWORD;
        case 4: // GENDER
          return GENDER;
        case 5: // BIRTHDAY
          return BIRTHDAY;
        case 7: // LAST_LOGIN_TIME
          return LAST_LOGIN_TIME;
        case 8: // LAST_LOGIN_IP
          return LAST_LOGIN_IP;
        case 9: // USER_LEVEL
          return USER_LEVEL;
        case 10: // NICKNAME
          return NICKNAME;
        case 11: // MOBILE
          return MOBILE;
        case 12: // AVATAR
          return AVATAR;
        case 13: // WEIXIN_OPENID
          return WEIXIN_OPENID;
        case 14: // STATUS
          return STATUS;
        case 15: // ADD_TIME
          return ADD_TIME;
        case 16: // UPDATE_TIME
          return UPDATE_TIME;
        case 17: // INTEGRAL
          return INTEGRAL;
        case 18: // GRADE
          return GRADE;
        case 19: // FROMSOUCE
          return FROMSOUCE;
        case 20: // ADDRESS
          return ADDRESS;
        case 21: // BABYBIRTHDAY
          return BABYBIRTHDAY;
        case 22: // BABYBIRTHDAY2
          return BABYBIRTHDAY2;
        case 23: // BABYSEX
          return BABYSEX;
        case 24: // BABYSEX2
          return BABYSEX2;
        case 25: // MEMBER_USERNAME
          return MEMBER_USERNAME;
        case 26: // COMPANY_ID
          return COMPANY_ID;
        case 27: // USER_TYPE
          return USER_TYPE;
        case 28: // ORIGIN
          return ORIGIN;
        case 29: // PROVINCE
          return PROVINCE;
        case 30: // CITY
          return CITY;
        case 31: // AREA
          return AREA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __GENDER_ISSET_ID = 1;
  private static final int __USERLEVEL_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __INTEGRAL_ISSET_ID = 4;
  private static final int __GRADE_ISSET_ID = 5;
  private static final int __BABYSEX_ISSET_ID = 6;
  private static final int __BABYSEX2_ISSET_ID = 7;
  private static final int __COMPANY_ID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.USERNAME, _Fields.PASSWORD, _Fields.GENDER, _Fields.BIRTHDAY, _Fields.LAST_LOGIN_TIME, _Fields.LAST_LOGIN_IP, _Fields.USER_LEVEL, _Fields.NICKNAME, _Fields.MOBILE, _Fields.AVATAR, _Fields.WEIXIN_OPENID, _Fields.STATUS, _Fields.ADD_TIME, _Fields.UPDATE_TIME, _Fields.INTEGRAL, _Fields.GRADE, _Fields.FROMSOUCE, _Fields.ADDRESS, _Fields.BABYBIRTHDAY, _Fields.BABYBIRTHDAY2, _Fields.BABYSEX, _Fields.BABYSEX2, _Fields.MEMBER_USERNAME, _Fields.COMPANY_ID, _Fields.USER_TYPE, _Fields.ORIGIN, _Fields.PROVINCE, _Fields.CITY, _Fields.AREA};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("birthday", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_LOGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastLoginTime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_LOGIN_IP, new org.apache.thrift.meta_data.FieldMetaData("lastLoginIp", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("userLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("nickname", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVATAR, new org.apache.thrift.meta_data.FieldMetaData("avatar", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WEIXIN_OPENID, new org.apache.thrift.meta_data.FieldMetaData("weixinOpenid", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ADD_TIME, new org.apache.thrift.meta_data.FieldMetaData("addTime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTEGRAL, new org.apache.thrift.meta_data.FieldMetaData("integral", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.GRADE, new org.apache.thrift.meta_data.FieldMetaData("grade", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.FROMSOUCE, new org.apache.thrift.meta_data.FieldMetaData("fromsouce", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BABYBIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("babybirthday", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BABYBIRTHDAY2, new org.apache.thrift.meta_data.FieldMetaData("babybirthday2", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BABYSEX, new org.apache.thrift.meta_data.FieldMetaData("babysex", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.BABYSEX2, new org.apache.thrift.meta_data.FieldMetaData("babysex2", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MEMBER_USERNAME, new org.apache.thrift.meta_data.FieldMetaData("memberUsername", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("company_id", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("user_type", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGIN, new org.apache.thrift.meta_data.FieldMetaData("origin", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("province", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AREA, new org.apache.thrift.meta_data.FieldMetaData("area", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(User.class, metaDataMap);
  }

  public User() {
    this.id = 0;

  }

  public User(
    int id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public User(User other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    this.gender = other.gender;
    if (other.isSetBirthday()) {
      this.birthday = other.birthday;
    }
    if (other.isSetLastLoginTime()) {
      this.lastLoginTime = other.lastLoginTime;
    }
    if (other.isSetLastLoginIp()) {
      this.lastLoginIp = other.lastLoginIp;
    }
    this.userLevel = other.userLevel;
    if (other.isSetNickname()) {
      this.nickname = other.nickname;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetAvatar()) {
      this.avatar = other.avatar;
    }
    if (other.isSetWeixinOpenid()) {
      this.weixinOpenid = other.weixinOpenid;
    }
    this.status = other.status;
    if (other.isSetAddTime()) {
      this.addTime = other.addTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    this.integral = other.integral;
    this.grade = other.grade;
    if (other.isSetFromsouce()) {
      this.fromsouce = other.fromsouce;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetBabybirthday()) {
      this.babybirthday = other.babybirthday;
    }
    if (other.isSetBabybirthday2()) {
      this.babybirthday2 = other.babybirthday2;
    }
    this.babysex = other.babysex;
    this.babysex2 = other.babysex2;
    if (other.isSetMemberUsername()) {
      this.memberUsername = other.memberUsername;
    }
    this.company_id = other.company_id;
    if (other.isSetUser_type()) {
      this.user_type = other.user_type;
    }
    if (other.isSetOrigin()) {
      this.origin = other.origin;
    }
    if (other.isSetProvince()) {
      this.province = other.province;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetArea()) {
      this.area = other.area;
    }
  }

  public User deepCopy() {
    return new User(this);
  }

  @Override
  public void clear() {
    this.id = 0;

    this.username = null;
    this.password = null;
    setGenderIsSet(false);
    this.gender = 0;
    this.birthday = null;
    this.lastLoginTime = null;
    this.lastLoginIp = null;
    setUserLevelIsSet(false);
    this.userLevel = 0;
    this.nickname = null;
    this.mobile = null;
    this.avatar = null;
    this.weixinOpenid = null;
    setStatusIsSet(false);
    this.status = 0;
    this.addTime = null;
    this.updateTime = null;
    setIntegralIsSet(false);
    this.integral = 0;
    setGradeIsSet(false);
    this.grade = 0;
    this.fromsouce = null;
    this.address = null;
    this.babybirthday = null;
    this.babybirthday2 = null;
    setBabysexIsSet(false);
    this.babysex = 0;
    setBabysex2IsSet(false);
    this.babysex2 = 0;
    this.memberUsername = null;
    setCompany_idIsSet(false);
    this.company_id = 0;
    this.user_type = null;
    this.origin = null;
    this.province = null;
    this.city = null;
    this.area = null;
  }

  public int getId() {
    return this.id;
  }

  public User setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getUsername() {
    return this.username;
  }

  public User setUsername(@org.apache.thrift.annotation.Nullable String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getPassword() {
    return this.password;
  }

  public User setPassword(@org.apache.thrift.annotation.Nullable String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public byte getGender() {
    return this.gender;
  }

  public User setGender(byte gender) {
    this.gender = gender;
    setGenderIsSet(true);
    return this;
  }

  public void unsetGender() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  public void setGenderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GENDER_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getBirthday() {
    return this.birthday;
  }

  public User setBirthday(@org.apache.thrift.annotation.Nullable String birthday) {
    this.birthday = birthday;
    return this;
  }

  public void unsetBirthday() {
    this.birthday = null;
  }

  /** Returns true if field birthday is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthday() {
    return this.birthday != null;
  }

  public void setBirthdayIsSet(boolean value) {
    if (!value) {
      this.birthday = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getLastLoginTime() {
    return this.lastLoginTime;
  }

  public User setLastLoginTime(@org.apache.thrift.annotation.Nullable String lastLoginTime) {
    this.lastLoginTime = lastLoginTime;
    return this;
  }

  public void unsetLastLoginTime() {
    this.lastLoginTime = null;
  }

  /** Returns true if field lastLoginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLoginTime() {
    return this.lastLoginTime != null;
  }

  public void setLastLoginTimeIsSet(boolean value) {
    if (!value) {
      this.lastLoginTime = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getLastLoginIp() {
    return this.lastLoginIp;
  }

  public User setLastLoginIp(@org.apache.thrift.annotation.Nullable String lastLoginIp) {
    this.lastLoginIp = lastLoginIp;
    return this;
  }

  public void unsetLastLoginIp() {
    this.lastLoginIp = null;
  }

  /** Returns true if field lastLoginIp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLoginIp() {
    return this.lastLoginIp != null;
  }

  public void setLastLoginIpIsSet(boolean value) {
    if (!value) {
      this.lastLoginIp = null;
    }
  }

  public byte getUserLevel() {
    return this.userLevel;
  }

  public User setUserLevel(byte userLevel) {
    this.userLevel = userLevel;
    setUserLevelIsSet(true);
    return this;
  }

  public void unsetUserLevel() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERLEVEL_ISSET_ID);
  }

  /** Returns true if field userLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetUserLevel() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERLEVEL_ISSET_ID);
  }

  public void setUserLevelIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERLEVEL_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getNickname() {
    return this.nickname;
  }

  public User setNickname(@org.apache.thrift.annotation.Nullable String nickname) {
    this.nickname = nickname;
    return this;
  }

  public void unsetNickname() {
    this.nickname = null;
  }

  /** Returns true if field nickname is set (has been assigned a value) and false otherwise */
  public boolean isSetNickname() {
    return this.nickname != null;
  }

  public void setNicknameIsSet(boolean value) {
    if (!value) {
      this.nickname = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getMobile() {
    return this.mobile;
  }

  public User setMobile(@org.apache.thrift.annotation.Nullable String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getAvatar() {
    return this.avatar;
  }

  public User setAvatar(@org.apache.thrift.annotation.Nullable String avatar) {
    this.avatar = avatar;
    return this;
  }

  public void unsetAvatar() {
    this.avatar = null;
  }

  /** Returns true if field avatar is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatar() {
    return this.avatar != null;
  }

  public void setAvatarIsSet(boolean value) {
    if (!value) {
      this.avatar = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getWeixinOpenid() {
    return this.weixinOpenid;
  }

  public User setWeixinOpenid(@org.apache.thrift.annotation.Nullable String weixinOpenid) {
    this.weixinOpenid = weixinOpenid;
    return this;
  }

  public void unsetWeixinOpenid() {
    this.weixinOpenid = null;
  }

  /** Returns true if field weixinOpenid is set (has been assigned a value) and false otherwise */
  public boolean isSetWeixinOpenid() {
    return this.weixinOpenid != null;
  }

  public void setWeixinOpenidIsSet(boolean value) {
    if (!value) {
      this.weixinOpenid = null;
    }
  }

  public byte getStatus() {
    return this.status;
  }

  public User setStatus(byte status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getAddTime() {
    return this.addTime;
  }

  public User setAddTime(@org.apache.thrift.annotation.Nullable String addTime) {
    this.addTime = addTime;
    return this;
  }

  public void unsetAddTime() {
    this.addTime = null;
  }

  /** Returns true if field addTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAddTime() {
    return this.addTime != null;
  }

  public void setAddTimeIsSet(boolean value) {
    if (!value) {
      this.addTime = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getUpdateTime() {
    return this.updateTime;
  }

  public User setUpdateTime(@org.apache.thrift.annotation.Nullable String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public int getIntegral() {
    return this.integral;
  }

  public User setIntegral(int integral) {
    this.integral = integral;
    setIntegralIsSet(true);
    return this;
  }

  public void unsetIntegral() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTEGRAL_ISSET_ID);
  }

  /** Returns true if field integral is set (has been assigned a value) and false otherwise */
  public boolean isSetIntegral() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTEGRAL_ISSET_ID);
  }

  public void setIntegralIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTEGRAL_ISSET_ID, value);
  }

  public int getGrade() {
    return this.grade;
  }

  public User setGrade(int grade) {
    this.grade = grade;
    setGradeIsSet(true);
    return this;
  }

  public void unsetGrade() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GRADE_ISSET_ID);
  }

  /** Returns true if field grade is set (has been assigned a value) and false otherwise */
  public boolean isSetGrade() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GRADE_ISSET_ID);
  }

  public void setGradeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GRADE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getFromsouce() {
    return this.fromsouce;
  }

  public User setFromsouce(@org.apache.thrift.annotation.Nullable String fromsouce) {
    this.fromsouce = fromsouce;
    return this;
  }

  public void unsetFromsouce() {
    this.fromsouce = null;
  }

  /** Returns true if field fromsouce is set (has been assigned a value) and false otherwise */
  public boolean isSetFromsouce() {
    return this.fromsouce != null;
  }

  public void setFromsouceIsSet(boolean value) {
    if (!value) {
      this.fromsouce = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getAddress() {
    return this.address;
  }

  public User setAddress(@org.apache.thrift.annotation.Nullable String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getBabybirthday() {
    return this.babybirthday;
  }

  public User setBabybirthday(@org.apache.thrift.annotation.Nullable String babybirthday) {
    this.babybirthday = babybirthday;
    return this;
  }

  public void unsetBabybirthday() {
    this.babybirthday = null;
  }

  /** Returns true if field babybirthday is set (has been assigned a value) and false otherwise */
  public boolean isSetBabybirthday() {
    return this.babybirthday != null;
  }

  public void setBabybirthdayIsSet(boolean value) {
    if (!value) {
      this.babybirthday = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getBabybirthday2() {
    return this.babybirthday2;
  }

  public User setBabybirthday2(@org.apache.thrift.annotation.Nullable String babybirthday2) {
    this.babybirthday2 = babybirthday2;
    return this;
  }

  public void unsetBabybirthday2() {
    this.babybirthday2 = null;
  }

  /** Returns true if field babybirthday2 is set (has been assigned a value) and false otherwise */
  public boolean isSetBabybirthday2() {
    return this.babybirthday2 != null;
  }

  public void setBabybirthday2IsSet(boolean value) {
    if (!value) {
      this.babybirthday2 = null;
    }
  }

  public byte getBabysex() {
    return this.babysex;
  }

  public User setBabysex(byte babysex) {
    this.babysex = babysex;
    setBabysexIsSet(true);
    return this;
  }

  public void unsetBabysex() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BABYSEX_ISSET_ID);
  }

  /** Returns true if field babysex is set (has been assigned a value) and false otherwise */
  public boolean isSetBabysex() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BABYSEX_ISSET_ID);
  }

  public void setBabysexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BABYSEX_ISSET_ID, value);
  }

  public byte getBabysex2() {
    return this.babysex2;
  }

  public User setBabysex2(byte babysex2) {
    this.babysex2 = babysex2;
    setBabysex2IsSet(true);
    return this;
  }

  public void unsetBabysex2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BABYSEX2_ISSET_ID);
  }

  /** Returns true if field babysex2 is set (has been assigned a value) and false otherwise */
  public boolean isSetBabysex2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BABYSEX2_ISSET_ID);
  }

  public void setBabysex2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BABYSEX2_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getMemberUsername() {
    return this.memberUsername;
  }

  public User setMemberUsername(@org.apache.thrift.annotation.Nullable String memberUsername) {
    this.memberUsername = memberUsername;
    return this;
  }

  public void unsetMemberUsername() {
    this.memberUsername = null;
  }

  /** Returns true if field memberUsername is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberUsername() {
    return this.memberUsername != null;
  }

  public void setMemberUsernameIsSet(boolean value) {
    if (!value) {
      this.memberUsername = null;
    }
  }

  public int getCompany_id() {
    return this.company_id;
  }

  public User setCompany_id(int company_id) {
    this.company_id = company_id;
    setCompany_idIsSet(true);
    return this;
  }

  public void unsetCompany_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
  }

  /** Returns true if field company_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPANY_ID_ISSET_ID);
  }

  public void setCompany_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPANY_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getUser_type() {
    return this.user_type;
  }

  public User setUser_type(@org.apache.thrift.annotation.Nullable String user_type) {
    this.user_type = user_type;
    return this;
  }

  public void unsetUser_type() {
    this.user_type = null;
  }

  /** Returns true if field user_type is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_type() {
    return this.user_type != null;
  }

  public void setUser_typeIsSet(boolean value) {
    if (!value) {
      this.user_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getOrigin() {
    return this.origin;
  }

  public User setOrigin(@org.apache.thrift.annotation.Nullable String origin) {
    this.origin = origin;
    return this;
  }

  public void unsetOrigin() {
    this.origin = null;
  }

  /** Returns true if field origin is set (has been assigned a value) and false otherwise */
  public boolean isSetOrigin() {
    return this.origin != null;
  }

  public void setOriginIsSet(boolean value) {
    if (!value) {
      this.origin = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getProvince() {
    return this.province;
  }

  public User setProvince(@org.apache.thrift.annotation.Nullable String province) {
    this.province = province;
    return this;
  }

  public void unsetProvince() {
    this.province = null;
  }

  /** Returns true if field province is set (has been assigned a value) and false otherwise */
  public boolean isSetProvince() {
    return this.province != null;
  }

  public void setProvinceIsSet(boolean value) {
    if (!value) {
      this.province = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getCity() {
    return this.city;
  }

  public User setCity(@org.apache.thrift.annotation.Nullable String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getArea() {
    return this.area;
  }

  public User setArea(@org.apache.thrift.annotation.Nullable String area) {
    this.area = area;
    return this;
  }

  public void unsetArea() {
    this.area = null;
  }

  /** Returns true if field area is set (has been assigned a value) and false otherwise */
  public boolean isSetArea() {
    return this.area != null;
  }

  public void setAreaIsSet(boolean value) {
    if (!value) {
      this.area = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((Byte)value);
      }
      break;

    case BIRTHDAY:
      if (value == null) {
        unsetBirthday();
      } else {
        setBirthday((String)value);
      }
      break;

    case LAST_LOGIN_TIME:
      if (value == null) {
        unsetLastLoginTime();
      } else {
        setLastLoginTime((String)value);
      }
      break;

    case LAST_LOGIN_IP:
      if (value == null) {
        unsetLastLoginIp();
      } else {
        setLastLoginIp((String)value);
      }
      break;

    case USER_LEVEL:
      if (value == null) {
        unsetUserLevel();
      } else {
        setUserLevel((Byte)value);
      }
      break;

    case NICKNAME:
      if (value == null) {
        unsetNickname();
      } else {
        setNickname((String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case AVATAR:
      if (value == null) {
        unsetAvatar();
      } else {
        setAvatar((String)value);
      }
      break;

    case WEIXIN_OPENID:
      if (value == null) {
        unsetWeixinOpenid();
      } else {
        setWeixinOpenid((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Byte)value);
      }
      break;

    case ADD_TIME:
      if (value == null) {
        unsetAddTime();
      } else {
        setAddTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    case INTEGRAL:
      if (value == null) {
        unsetIntegral();
      } else {
        setIntegral((Integer)value);
      }
      break;

    case GRADE:
      if (value == null) {
        unsetGrade();
      } else {
        setGrade((Integer)value);
      }
      break;

    case FROMSOUCE:
      if (value == null) {
        unsetFromsouce();
      } else {
        setFromsouce((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case BABYBIRTHDAY:
      if (value == null) {
        unsetBabybirthday();
      } else {
        setBabybirthday((String)value);
      }
      break;

    case BABYBIRTHDAY2:
      if (value == null) {
        unsetBabybirthday2();
      } else {
        setBabybirthday2((String)value);
      }
      break;

    case BABYSEX:
      if (value == null) {
        unsetBabysex();
      } else {
        setBabysex((Byte)value);
      }
      break;

    case BABYSEX2:
      if (value == null) {
        unsetBabysex2();
      } else {
        setBabysex2((Byte)value);
      }
      break;

    case MEMBER_USERNAME:
      if (value == null) {
        unsetMemberUsername();
      } else {
        setMemberUsername((String)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompany_id();
      } else {
        setCompany_id((Integer)value);
      }
      break;

    case USER_TYPE:
      if (value == null) {
        unsetUser_type();
      } else {
        setUser_type((String)value);
      }
      break;

    case ORIGIN:
      if (value == null) {
        unsetOrigin();
      } else {
        setOrigin((String)value);
      }
      break;

    case PROVINCE:
      if (value == null) {
        unsetProvince();
      } else {
        setProvince((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case AREA:
      if (value == null) {
        unsetArea();
      } else {
        setArea((String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case USERNAME:
      return getUsername();

    case PASSWORD:
      return getPassword();

    case GENDER:
      return getGender();

    case BIRTHDAY:
      return getBirthday();

    case LAST_LOGIN_TIME:
      return getLastLoginTime();

    case LAST_LOGIN_IP:
      return getLastLoginIp();

    case USER_LEVEL:
      return getUserLevel();

    case NICKNAME:
      return getNickname();

    case MOBILE:
      return getMobile();

    case AVATAR:
      return getAvatar();

    case WEIXIN_OPENID:
      return getWeixinOpenid();

    case STATUS:
      return getStatus();

    case ADD_TIME:
      return getAddTime();

    case UPDATE_TIME:
      return getUpdateTime();

    case INTEGRAL:
      return getIntegral();

    case GRADE:
      return getGrade();

    case FROMSOUCE:
      return getFromsouce();

    case ADDRESS:
      return getAddress();

    case BABYBIRTHDAY:
      return getBabybirthday();

    case BABYBIRTHDAY2:
      return getBabybirthday2();

    case BABYSEX:
      return getBabysex();

    case BABYSEX2:
      return getBabysex2();

    case MEMBER_USERNAME:
      return getMemberUsername();

    case COMPANY_ID:
      return getCompany_id();

    case USER_TYPE:
      return getUser_type();

    case ORIGIN:
      return getOrigin();

    case PROVINCE:
      return getProvince();

    case CITY:
      return getCity();

    case AREA:
      return getArea();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USERNAME:
      return isSetUsername();
    case PASSWORD:
      return isSetPassword();
    case GENDER:
      return isSetGender();
    case BIRTHDAY:
      return isSetBirthday();
    case LAST_LOGIN_TIME:
      return isSetLastLoginTime();
    case LAST_LOGIN_IP:
      return isSetLastLoginIp();
    case USER_LEVEL:
      return isSetUserLevel();
    case NICKNAME:
      return isSetNickname();
    case MOBILE:
      return isSetMobile();
    case AVATAR:
      return isSetAvatar();
    case WEIXIN_OPENID:
      return isSetWeixinOpenid();
    case STATUS:
      return isSetStatus();
    case ADD_TIME:
      return isSetAddTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case INTEGRAL:
      return isSetIntegral();
    case GRADE:
      return isSetGrade();
    case FROMSOUCE:
      return isSetFromsouce();
    case ADDRESS:
      return isSetAddress();
    case BABYBIRTHDAY:
      return isSetBabybirthday();
    case BABYBIRTHDAY2:
      return isSetBabybirthday2();
    case BABYSEX:
      return isSetBabysex();
    case BABYSEX2:
      return isSetBabysex2();
    case MEMBER_USERNAME:
      return isSetMemberUsername();
    case COMPANY_ID:
      return isSetCompany_id();
    case USER_TYPE:
      return isSetUser_type();
    case ORIGIN:
      return isSetOrigin();
    case PROVINCE:
      return isSetProvince();
    case CITY:
      return isSetCity();
    case AREA:
      return isSetArea();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof User)
      return this.equals((User)that);
    return false;
  }

  public boolean equals(User that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_gender = true && this.isSetGender();
    boolean that_present_gender = true && that.isSetGender();
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (this.gender != that.gender)
        return false;
    }

    boolean this_present_birthday = true && this.isSetBirthday();
    boolean that_present_birthday = true && that.isSetBirthday();
    if (this_present_birthday || that_present_birthday) {
      if (!(this_present_birthday && that_present_birthday))
        return false;
      if (!this.birthday.equals(that.birthday))
        return false;
    }

    boolean this_present_lastLoginTime = true && this.isSetLastLoginTime();
    boolean that_present_lastLoginTime = true && that.isSetLastLoginTime();
    if (this_present_lastLoginTime || that_present_lastLoginTime) {
      if (!(this_present_lastLoginTime && that_present_lastLoginTime))
        return false;
      if (!this.lastLoginTime.equals(that.lastLoginTime))
        return false;
    }

    boolean this_present_lastLoginIp = true && this.isSetLastLoginIp();
    boolean that_present_lastLoginIp = true && that.isSetLastLoginIp();
    if (this_present_lastLoginIp || that_present_lastLoginIp) {
      if (!(this_present_lastLoginIp && that_present_lastLoginIp))
        return false;
      if (!this.lastLoginIp.equals(that.lastLoginIp))
        return false;
    }

    boolean this_present_userLevel = true && this.isSetUserLevel();
    boolean that_present_userLevel = true && that.isSetUserLevel();
    if (this_present_userLevel || that_present_userLevel) {
      if (!(this_present_userLevel && that_present_userLevel))
        return false;
      if (this.userLevel != that.userLevel)
        return false;
    }

    boolean this_present_nickname = true && this.isSetNickname();
    boolean that_present_nickname = true && that.isSetNickname();
    if (this_present_nickname || that_present_nickname) {
      if (!(this_present_nickname && that_present_nickname))
        return false;
      if (!this.nickname.equals(that.nickname))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_avatar = true && this.isSetAvatar();
    boolean that_present_avatar = true && that.isSetAvatar();
    if (this_present_avatar || that_present_avatar) {
      if (!(this_present_avatar && that_present_avatar))
        return false;
      if (!this.avatar.equals(that.avatar))
        return false;
    }

    boolean this_present_weixinOpenid = true && this.isSetWeixinOpenid();
    boolean that_present_weixinOpenid = true && that.isSetWeixinOpenid();
    if (this_present_weixinOpenid || that_present_weixinOpenid) {
      if (!(this_present_weixinOpenid && that_present_weixinOpenid))
        return false;
      if (!this.weixinOpenid.equals(that.weixinOpenid))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_addTime = true && this.isSetAddTime();
    boolean that_present_addTime = true && that.isSetAddTime();
    if (this_present_addTime || that_present_addTime) {
      if (!(this_present_addTime && that_present_addTime))
        return false;
      if (!this.addTime.equals(that.addTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_integral = true && this.isSetIntegral();
    boolean that_present_integral = true && that.isSetIntegral();
    if (this_present_integral || that_present_integral) {
      if (!(this_present_integral && that_present_integral))
        return false;
      if (this.integral != that.integral)
        return false;
    }

    boolean this_present_grade = true && this.isSetGrade();
    boolean that_present_grade = true && that.isSetGrade();
    if (this_present_grade || that_present_grade) {
      if (!(this_present_grade && that_present_grade))
        return false;
      if (this.grade != that.grade)
        return false;
    }

    boolean this_present_fromsouce = true && this.isSetFromsouce();
    boolean that_present_fromsouce = true && that.isSetFromsouce();
    if (this_present_fromsouce || that_present_fromsouce) {
      if (!(this_present_fromsouce && that_present_fromsouce))
        return false;
      if (!this.fromsouce.equals(that.fromsouce))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_babybirthday = true && this.isSetBabybirthday();
    boolean that_present_babybirthday = true && that.isSetBabybirthday();
    if (this_present_babybirthday || that_present_babybirthday) {
      if (!(this_present_babybirthday && that_present_babybirthday))
        return false;
      if (!this.babybirthday.equals(that.babybirthday))
        return false;
    }

    boolean this_present_babybirthday2 = true && this.isSetBabybirthday2();
    boolean that_present_babybirthday2 = true && that.isSetBabybirthday2();
    if (this_present_babybirthday2 || that_present_babybirthday2) {
      if (!(this_present_babybirthday2 && that_present_babybirthday2))
        return false;
      if (!this.babybirthday2.equals(that.babybirthday2))
        return false;
    }

    boolean this_present_babysex = true && this.isSetBabysex();
    boolean that_present_babysex = true && that.isSetBabysex();
    if (this_present_babysex || that_present_babysex) {
      if (!(this_present_babysex && that_present_babysex))
        return false;
      if (this.babysex != that.babysex)
        return false;
    }

    boolean this_present_babysex2 = true && this.isSetBabysex2();
    boolean that_present_babysex2 = true && that.isSetBabysex2();
    if (this_present_babysex2 || that_present_babysex2) {
      if (!(this_present_babysex2 && that_present_babysex2))
        return false;
      if (this.babysex2 != that.babysex2)
        return false;
    }

    boolean this_present_memberUsername = true && this.isSetMemberUsername();
    boolean that_present_memberUsername = true && that.isSetMemberUsername();
    if (this_present_memberUsername || that_present_memberUsername) {
      if (!(this_present_memberUsername && that_present_memberUsername))
        return false;
      if (!this.memberUsername.equals(that.memberUsername))
        return false;
    }

    boolean this_present_company_id = true && this.isSetCompany_id();
    boolean that_present_company_id = true && that.isSetCompany_id();
    if (this_present_company_id || that_present_company_id) {
      if (!(this_present_company_id && that_present_company_id))
        return false;
      if (this.company_id != that.company_id)
        return false;
    }

    boolean this_present_user_type = true && this.isSetUser_type();
    boolean that_present_user_type = true && that.isSetUser_type();
    if (this_present_user_type || that_present_user_type) {
      if (!(this_present_user_type && that_present_user_type))
        return false;
      if (!this.user_type.equals(that.user_type))
        return false;
    }

    boolean this_present_origin = true && this.isSetOrigin();
    boolean that_present_origin = true && that.isSetOrigin();
    if (this_present_origin || that_present_origin) {
      if (!(this_present_origin && that_present_origin))
        return false;
      if (!this.origin.equals(that.origin))
        return false;
    }

    boolean this_present_province = true && this.isSetProvince();
    boolean that_present_province = true && that.isSetProvince();
    if (this_present_province || that_present_province) {
      if (!(this_present_province && that_present_province))
        return false;
      if (!this.province.equals(that.province))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_area = true && this.isSetArea();
    boolean that_present_area = true && that.isSetArea();
    if (this_present_area || that_present_area) {
      if (!(this_present_area && that_present_area))
        return false;
      if (!this.area.equals(that.area))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername())
      hashCode = hashCode * 8191 + username.hashCode();

    hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
    if (isSetPassword())
      hashCode = hashCode * 8191 + password.hashCode();

    hashCode = hashCode * 8191 + ((isSetGender()) ? 131071 : 524287);
    if (isSetGender())
      hashCode = hashCode * 8191 + (int) (gender);

    hashCode = hashCode * 8191 + ((isSetBirthday()) ? 131071 : 524287);
    if (isSetBirthday())
      hashCode = hashCode * 8191 + birthday.hashCode();

    hashCode = hashCode * 8191 + ((isSetLastLoginTime()) ? 131071 : 524287);
    if (isSetLastLoginTime())
      hashCode = hashCode * 8191 + lastLoginTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetLastLoginIp()) ? 131071 : 524287);
    if (isSetLastLoginIp())
      hashCode = hashCode * 8191 + lastLoginIp.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserLevel()) ? 131071 : 524287);
    if (isSetUserLevel())
      hashCode = hashCode * 8191 + (int) (userLevel);

    hashCode = hashCode * 8191 + ((isSetNickname()) ? 131071 : 524287);
    if (isSetNickname())
      hashCode = hashCode * 8191 + nickname.hashCode();

    hashCode = hashCode * 8191 + ((isSetMobile()) ? 131071 : 524287);
    if (isSetMobile())
      hashCode = hashCode * 8191 + mobile.hashCode();

    hashCode = hashCode * 8191 + ((isSetAvatar()) ? 131071 : 524287);
    if (isSetAvatar())
      hashCode = hashCode * 8191 + avatar.hashCode();

    hashCode = hashCode * 8191 + ((isSetWeixinOpenid()) ? 131071 : 524287);
    if (isSetWeixinOpenid())
      hashCode = hashCode * 8191 + weixinOpenid.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + (int) (status);

    hashCode = hashCode * 8191 + ((isSetAddTime()) ? 131071 : 524287);
    if (isSetAddTime())
      hashCode = hashCode * 8191 + addTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
    if (isSetUpdateTime())
      hashCode = hashCode * 8191 + updateTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetIntegral()) ? 131071 : 524287);
    if (isSetIntegral())
      hashCode = hashCode * 8191 + integral;

    hashCode = hashCode * 8191 + ((isSetGrade()) ? 131071 : 524287);
    if (isSetGrade())
      hashCode = hashCode * 8191 + grade;

    hashCode = hashCode * 8191 + ((isSetFromsouce()) ? 131071 : 524287);
    if (isSetFromsouce())
      hashCode = hashCode * 8191 + fromsouce.hashCode();

    hashCode = hashCode * 8191 + ((isSetAddress()) ? 131071 : 524287);
    if (isSetAddress())
      hashCode = hashCode * 8191 + address.hashCode();

    hashCode = hashCode * 8191 + ((isSetBabybirthday()) ? 131071 : 524287);
    if (isSetBabybirthday())
      hashCode = hashCode * 8191 + babybirthday.hashCode();

    hashCode = hashCode * 8191 + ((isSetBabybirthday2()) ? 131071 : 524287);
    if (isSetBabybirthday2())
      hashCode = hashCode * 8191 + babybirthday2.hashCode();

    hashCode = hashCode * 8191 + ((isSetBabysex()) ? 131071 : 524287);
    if (isSetBabysex())
      hashCode = hashCode * 8191 + (int) (babysex);

    hashCode = hashCode * 8191 + ((isSetBabysex2()) ? 131071 : 524287);
    if (isSetBabysex2())
      hashCode = hashCode * 8191 + (int) (babysex2);

    hashCode = hashCode * 8191 + ((isSetMemberUsername()) ? 131071 : 524287);
    if (isSetMemberUsername())
      hashCode = hashCode * 8191 + memberUsername.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompany_id()) ? 131071 : 524287);
    if (isSetCompany_id())
      hashCode = hashCode * 8191 + company_id;

    hashCode = hashCode * 8191 + ((isSetUser_type()) ? 131071 : 524287);
    if (isSetUser_type())
      hashCode = hashCode * 8191 + user_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetOrigin()) ? 131071 : 524287);
    if (isSetOrigin())
      hashCode = hashCode * 8191 + origin.hashCode();

    hashCode = hashCode * 8191 + ((isSetProvince()) ? 131071 : 524287);
    if (isSetProvince())
      hashCode = hashCode * 8191 + province.hashCode();

    hashCode = hashCode * 8191 + ((isSetCity()) ? 131071 : 524287);
    if (isSetCity())
      hashCode = hashCode * 8191 + city.hashCode();

    hashCode = hashCode * 8191 + ((isSetArea()) ? 131071 : 524287);
    if (isSetArea())
      hashCode = hashCode * 8191 + area.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(User other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthday()).compareTo(other.isSetBirthday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthday, other.birthday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastLoginTime()).compareTo(other.isSetLastLoginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLoginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoginTime, other.lastLoginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastLoginIp()).compareTo(other.isSetLastLoginIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLoginIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoginIp, other.lastLoginIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserLevel()).compareTo(other.isSetUserLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLevel, other.userLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickname()).compareTo(other.isSetNickname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, other.nickname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvatar()).compareTo(other.isSetAvatar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatar, other.avatar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeixinOpenid()).compareTo(other.isSetWeixinOpenid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeixinOpenid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weixinOpenid, other.weixinOpenid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddTime()).compareTo(other.isSetAddTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addTime, other.addTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntegral()).compareTo(other.isSetIntegral());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntegral()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integral, other.integral);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrade()).compareTo(other.isSetGrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grade, other.grade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromsouce()).compareTo(other.isSetFromsouce());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromsouce()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromsouce, other.fromsouce);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBabybirthday()).compareTo(other.isSetBabybirthday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBabybirthday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.babybirthday, other.babybirthday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBabybirthday2()).compareTo(other.isSetBabybirthday2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBabybirthday2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.babybirthday2, other.babybirthday2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBabysex()).compareTo(other.isSetBabysex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBabysex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.babysex, other.babysex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBabysex2()).compareTo(other.isSetBabysex2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBabysex2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.babysex2, other.babysex2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberUsername()).compareTo(other.isSetMemberUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberUsername, other.memberUsername);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompany_id()).compareTo(other.isSetCompany_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company_id, other.company_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_type()).compareTo(other.isSetUser_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_type, other.user_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrigin()).compareTo(other.isSetOrigin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrigin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.origin, other.origin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvince()).compareTo(other.isSetProvince());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvince()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, other.province);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArea()).compareTo(other.isSetArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.area, other.area);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("User(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetUsername()) {
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
    }
    if (isSetPassword()) {
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
    }
    if (isSetGender()) {
      if (!first) sb.append(", ");
      sb.append("gender:");
      sb.append(this.gender);
      first = false;
    }
    if (isSetBirthday()) {
      if (!first) sb.append(", ");
      sb.append("birthday:");
      if (this.birthday == null) {
        sb.append("null");
      } else {
        sb.append(this.birthday);
      }
      first = false;
    }
    if (isSetLastLoginTime()) {
      if (!first) sb.append(", ");
      sb.append("lastLoginTime:");
      if (this.lastLoginTime == null) {
        sb.append("null");
      } else {
        sb.append(this.lastLoginTime);
      }
      first = false;
    }
    if (isSetLastLoginIp()) {
      if (!first) sb.append(", ");
      sb.append("lastLoginIp:");
      if (this.lastLoginIp == null) {
        sb.append("null");
      } else {
        sb.append(this.lastLoginIp);
      }
      first = false;
    }
    if (isSetUserLevel()) {
      if (!first) sb.append(", ");
      sb.append("userLevel:");
      sb.append(this.userLevel);
      first = false;
    }
    if (isSetNickname()) {
      if (!first) sb.append(", ");
      sb.append("nickname:");
      if (this.nickname == null) {
        sb.append("null");
      } else {
        sb.append(this.nickname);
      }
      first = false;
    }
    if (isSetMobile()) {
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
    }
    if (isSetAvatar()) {
      if (!first) sb.append(", ");
      sb.append("avatar:");
      if (this.avatar == null) {
        sb.append("null");
      } else {
        sb.append(this.avatar);
      }
      first = false;
    }
    if (isSetWeixinOpenid()) {
      if (!first) sb.append(", ");
      sb.append("weixinOpenid:");
      if (this.weixinOpenid == null) {
        sb.append("null");
      } else {
        sb.append(this.weixinOpenid);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetAddTime()) {
      if (!first) sb.append(", ");
      sb.append("addTime:");
      if (this.addTime == null) {
        sb.append("null");
      } else {
        sb.append(this.addTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    if (isSetIntegral()) {
      if (!first) sb.append(", ");
      sb.append("integral:");
      sb.append(this.integral);
      first = false;
    }
    if (isSetGrade()) {
      if (!first) sb.append(", ");
      sb.append("grade:");
      sb.append(this.grade);
      first = false;
    }
    if (isSetFromsouce()) {
      if (!first) sb.append(", ");
      sb.append("fromsouce:");
      if (this.fromsouce == null) {
        sb.append("null");
      } else {
        sb.append(this.fromsouce);
      }
      first = false;
    }
    if (isSetAddress()) {
      if (!first) sb.append(", ");
      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
    }
    if (isSetBabybirthday()) {
      if (!first) sb.append(", ");
      sb.append("babybirthday:");
      if (this.babybirthday == null) {
        sb.append("null");
      } else {
        sb.append(this.babybirthday);
      }
      first = false;
    }
    if (isSetBabybirthday2()) {
      if (!first) sb.append(", ");
      sb.append("babybirthday2:");
      if (this.babybirthday2 == null) {
        sb.append("null");
      } else {
        sb.append(this.babybirthday2);
      }
      first = false;
    }
    if (isSetBabysex()) {
      if (!first) sb.append(", ");
      sb.append("babysex:");
      sb.append(this.babysex);
      first = false;
    }
    if (isSetBabysex2()) {
      if (!first) sb.append(", ");
      sb.append("babysex2:");
      sb.append(this.babysex2);
      first = false;
    }
    if (isSetMemberUsername()) {
      if (!first) sb.append(", ");
      sb.append("memberUsername:");
      if (this.memberUsername == null) {
        sb.append("null");
      } else {
        sb.append(this.memberUsername);
      }
      first = false;
    }
    if (isSetCompany_id()) {
      if (!first) sb.append(", ");
      sb.append("company_id:");
      sb.append(this.company_id);
      first = false;
    }
    if (isSetUser_type()) {
      if (!first) sb.append(", ");
      sb.append("user_type:");
      if (this.user_type == null) {
        sb.append("null");
      } else {
        sb.append(this.user_type);
      }
      first = false;
    }
    if (isSetOrigin()) {
      if (!first) sb.append(", ");
      sb.append("origin:");
      if (this.origin == null) {
        sb.append("null");
      } else {
        sb.append(this.origin);
      }
      first = false;
    }
    if (isSetProvince()) {
      if (!first) sb.append(", ");
      sb.append("province:");
      if (this.province == null) {
        sb.append("null");
      } else {
        sb.append(this.province);
      }
      first = false;
    }
    if (isSetCity()) {
      if (!first) sb.append(", ");
      sb.append("city:");
      if (this.city == null) {
        sb.append("null");
      } else {
        sb.append(this.city);
      }
      first = false;
    }
    if (isSetArea()) {
      if (!first) sb.append(", ");
      sb.append("area:");
      if (this.area == null) {
        sb.append("null");
      } else {
        sb.append(this.area);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserStandardScheme getScheme() {
      return new UserStandardScheme();
    }
  }

  private static class UserStandardScheme extends org.apache.thrift.scheme.StandardScheme<User> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.gender = iprot.readByte();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.birthday = iprot.readString();
              struct.setBirthdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LAST_LOGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastLoginTime = iprot.readString();
              struct.setLastLoginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LAST_LOGIN_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastLoginIp = iprot.readString();
              struct.setLastLoginIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USER_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.userLevel = iprot.readByte();
              struct.setUserLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NICKNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickname = iprot.readString();
              struct.setNicknameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // AVATAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.avatar = iprot.readString();
              struct.setAvatarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // WEIXIN_OPENID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.weixinOpenid = iprot.readString();
              struct.setWeixinOpenidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.status = iprot.readByte();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ADD_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addTime = iprot.readString();
              struct.setAddTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // INTEGRAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.integral = iprot.readI32();
              struct.setIntegralIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // GRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.grade = iprot.readI32();
              struct.setGradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // FROMSOUCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromsouce = iprot.readString();
              struct.setFromsouceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // BABYBIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.babybirthday = iprot.readString();
              struct.setBabybirthdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // BABYBIRTHDAY2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.babybirthday2 = iprot.readString();
              struct.setBabybirthday2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // BABYSEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.babysex = iprot.readByte();
              struct.setBabysexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // BABYSEX2
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.babysex2 = iprot.readByte();
              struct.setBabysex2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // MEMBER_USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.memberUsername = iprot.readString();
              struct.setMemberUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.company_id = iprot.readI32();
              struct.setCompany_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // USER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_type = iprot.readString();
              struct.setUser_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // ORIGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.origin = iprot.readString();
              struct.setOriginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // PROVINCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.province = iprot.readString();
              struct.setProvinceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.area = iprot.readString();
              struct.setAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, User struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.username != null) {
        if (struct.isSetUsername()) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
      }
      if (struct.password != null) {
        if (struct.isSetPassword()) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGender()) {
        oprot.writeFieldBegin(GENDER_FIELD_DESC);
        oprot.writeByte(struct.gender);
        oprot.writeFieldEnd();
      }
      if (struct.birthday != null) {
        if (struct.isSetBirthday()) {
          oprot.writeFieldBegin(BIRTHDAY_FIELD_DESC);
          oprot.writeString(struct.birthday);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lastLoginTime != null) {
        if (struct.isSetLastLoginTime()) {
          oprot.writeFieldBegin(LAST_LOGIN_TIME_FIELD_DESC);
          oprot.writeString(struct.lastLoginTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lastLoginIp != null) {
        if (struct.isSetLastLoginIp()) {
          oprot.writeFieldBegin(LAST_LOGIN_IP_FIELD_DESC);
          oprot.writeString(struct.lastLoginIp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUserLevel()) {
        oprot.writeFieldBegin(USER_LEVEL_FIELD_DESC);
        oprot.writeByte(struct.userLevel);
        oprot.writeFieldEnd();
      }
      if (struct.nickname != null) {
        if (struct.isSetNickname()) {
          oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
          oprot.writeString(struct.nickname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mobile != null) {
        if (struct.isSetMobile()) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
      }
      if (struct.avatar != null) {
        if (struct.isSetAvatar()) {
          oprot.writeFieldBegin(AVATAR_FIELD_DESC);
          oprot.writeString(struct.avatar);
          oprot.writeFieldEnd();
        }
      }
      if (struct.weixinOpenid != null) {
        if (struct.isSetWeixinOpenid()) {
          oprot.writeFieldBegin(WEIXIN_OPENID_FIELD_DESC);
          oprot.writeString(struct.weixinOpenid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeByte(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.addTime != null) {
        if (struct.isSetAddTime()) {
          oprot.writeFieldBegin(ADD_TIME_FIELD_DESC);
          oprot.writeString(struct.addTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIntegral()) {
        oprot.writeFieldBegin(INTEGRAL_FIELD_DESC);
        oprot.writeI32(struct.integral);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGrade()) {
        oprot.writeFieldBegin(GRADE_FIELD_DESC);
        oprot.writeI32(struct.grade);
        oprot.writeFieldEnd();
      }
      if (struct.fromsouce != null) {
        if (struct.isSetFromsouce()) {
          oprot.writeFieldBegin(FROMSOUCE_FIELD_DESC);
          oprot.writeString(struct.fromsouce);
          oprot.writeFieldEnd();
        }
      }
      if (struct.address != null) {
        if (struct.isSetAddress()) {
          oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
          oprot.writeString(struct.address);
          oprot.writeFieldEnd();
        }
      }
      if (struct.babybirthday != null) {
        if (struct.isSetBabybirthday()) {
          oprot.writeFieldBegin(BABYBIRTHDAY_FIELD_DESC);
          oprot.writeString(struct.babybirthday);
          oprot.writeFieldEnd();
        }
      }
      if (struct.babybirthday2 != null) {
        if (struct.isSetBabybirthday2()) {
          oprot.writeFieldBegin(BABYBIRTHDAY2_FIELD_DESC);
          oprot.writeString(struct.babybirthday2);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBabysex()) {
        oprot.writeFieldBegin(BABYSEX_FIELD_DESC);
        oprot.writeByte(struct.babysex);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBabysex2()) {
        oprot.writeFieldBegin(BABYSEX2_FIELD_DESC);
        oprot.writeByte(struct.babysex2);
        oprot.writeFieldEnd();
      }
      if (struct.memberUsername != null) {
        if (struct.isSetMemberUsername()) {
          oprot.writeFieldBegin(MEMBER_USERNAME_FIELD_DESC);
          oprot.writeString(struct.memberUsername);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCompany_id()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.company_id);
        oprot.writeFieldEnd();
      }
      if (struct.user_type != null) {
        if (struct.isSetUser_type()) {
          oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
          oprot.writeString(struct.user_type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.origin != null) {
        if (struct.isSetOrigin()) {
          oprot.writeFieldBegin(ORIGIN_FIELD_DESC);
          oprot.writeString(struct.origin);
          oprot.writeFieldEnd();
        }
      }
      if (struct.province != null) {
        if (struct.isSetProvince()) {
          oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
          oprot.writeString(struct.province);
          oprot.writeFieldEnd();
        }
      }
      if (struct.city != null) {
        if (struct.isSetCity()) {
          oprot.writeFieldBegin(CITY_FIELD_DESC);
          oprot.writeString(struct.city);
          oprot.writeFieldEnd();
        }
      }
      if (struct.area != null) {
        if (struct.isSetArea()) {
          oprot.writeFieldBegin(AREA_FIELD_DESC);
          oprot.writeString(struct.area);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserTupleScheme getScheme() {
      return new UserTupleScheme();
    }
  }

  private static class UserTupleScheme extends org.apache.thrift.scheme.TupleScheme<User> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUsername()) {
        optionals.set(1);
      }
      if (struct.isSetPassword()) {
        optionals.set(2);
      }
      if (struct.isSetGender()) {
        optionals.set(3);
      }
      if (struct.isSetBirthday()) {
        optionals.set(4);
      }
      if (struct.isSetLastLoginTime()) {
        optionals.set(5);
      }
      if (struct.isSetLastLoginIp()) {
        optionals.set(6);
      }
      if (struct.isSetUserLevel()) {
        optionals.set(7);
      }
      if (struct.isSetNickname()) {
        optionals.set(8);
      }
      if (struct.isSetMobile()) {
        optionals.set(9);
      }
      if (struct.isSetAvatar()) {
        optionals.set(10);
      }
      if (struct.isSetWeixinOpenid()) {
        optionals.set(11);
      }
      if (struct.isSetStatus()) {
        optionals.set(12);
      }
      if (struct.isSetAddTime()) {
        optionals.set(13);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(14);
      }
      if (struct.isSetIntegral()) {
        optionals.set(15);
      }
      if (struct.isSetGrade()) {
        optionals.set(16);
      }
      if (struct.isSetFromsouce()) {
        optionals.set(17);
      }
      if (struct.isSetAddress()) {
        optionals.set(18);
      }
      if (struct.isSetBabybirthday()) {
        optionals.set(19);
      }
      if (struct.isSetBabybirthday2()) {
        optionals.set(20);
      }
      if (struct.isSetBabysex()) {
        optionals.set(21);
      }
      if (struct.isSetBabysex2()) {
        optionals.set(22);
      }
      if (struct.isSetMemberUsername()) {
        optionals.set(23);
      }
      if (struct.isSetCompany_id()) {
        optionals.set(24);
      }
      if (struct.isSetUser_type()) {
        optionals.set(25);
      }
      if (struct.isSetOrigin()) {
        optionals.set(26);
      }
      if (struct.isSetProvince()) {
        optionals.set(27);
      }
      if (struct.isSetCity()) {
        optionals.set(28);
      }
      if (struct.isSetArea()) {
        optionals.set(29);
      }
      oprot.writeBitSet(optionals, 30);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetGender()) {
        oprot.writeByte(struct.gender);
      }
      if (struct.isSetBirthday()) {
        oprot.writeString(struct.birthday);
      }
      if (struct.isSetLastLoginTime()) {
        oprot.writeString(struct.lastLoginTime);
      }
      if (struct.isSetLastLoginIp()) {
        oprot.writeString(struct.lastLoginIp);
      }
      if (struct.isSetUserLevel()) {
        oprot.writeByte(struct.userLevel);
      }
      if (struct.isSetNickname()) {
        oprot.writeString(struct.nickname);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetAvatar()) {
        oprot.writeString(struct.avatar);
      }
      if (struct.isSetWeixinOpenid()) {
        oprot.writeString(struct.weixinOpenid);
      }
      if (struct.isSetStatus()) {
        oprot.writeByte(struct.status);
      }
      if (struct.isSetAddTime()) {
        oprot.writeString(struct.addTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetIntegral()) {
        oprot.writeI32(struct.integral);
      }
      if (struct.isSetGrade()) {
        oprot.writeI32(struct.grade);
      }
      if (struct.isSetFromsouce()) {
        oprot.writeString(struct.fromsouce);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetBabybirthday()) {
        oprot.writeString(struct.babybirthday);
      }
      if (struct.isSetBabybirthday2()) {
        oprot.writeString(struct.babybirthday2);
      }
      if (struct.isSetBabysex()) {
        oprot.writeByte(struct.babysex);
      }
      if (struct.isSetBabysex2()) {
        oprot.writeByte(struct.babysex2);
      }
      if (struct.isSetMemberUsername()) {
        oprot.writeString(struct.memberUsername);
      }
      if (struct.isSetCompany_id()) {
        oprot.writeI32(struct.company_id);
      }
      if (struct.isSetUser_type()) {
        oprot.writeString(struct.user_type);
      }
      if (struct.isSetOrigin()) {
        oprot.writeString(struct.origin);
      }
      if (struct.isSetProvince()) {
        oprot.writeString(struct.province);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetArea()) {
        oprot.writeString(struct.area);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(30);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(3)) {
        struct.gender = iprot.readByte();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(4)) {
        struct.birthday = iprot.readString();
        struct.setBirthdayIsSet(true);
      }
      if (incoming.get(5)) {
        struct.lastLoginTime = iprot.readString();
        struct.setLastLoginTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lastLoginIp = iprot.readString();
        struct.setLastLoginIpIsSet(true);
      }
      if (incoming.get(7)) {
        struct.userLevel = iprot.readByte();
        struct.setUserLevelIsSet(true);
      }
      if (incoming.get(8)) {
        struct.nickname = iprot.readString();
        struct.setNicknameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(10)) {
        struct.avatar = iprot.readString();
        struct.setAvatarIsSet(true);
      }
      if (incoming.get(11)) {
        struct.weixinOpenid = iprot.readString();
        struct.setWeixinOpenidIsSet(true);
      }
      if (incoming.get(12)) {
        struct.status = iprot.readByte();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.addTime = iprot.readString();
        struct.setAddTimeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.integral = iprot.readI32();
        struct.setIntegralIsSet(true);
      }
      if (incoming.get(16)) {
        struct.grade = iprot.readI32();
        struct.setGradeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.fromsouce = iprot.readString();
        struct.setFromsouceIsSet(true);
      }
      if (incoming.get(18)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(19)) {
        struct.babybirthday = iprot.readString();
        struct.setBabybirthdayIsSet(true);
      }
      if (incoming.get(20)) {
        struct.babybirthday2 = iprot.readString();
        struct.setBabybirthday2IsSet(true);
      }
      if (incoming.get(21)) {
        struct.babysex = iprot.readByte();
        struct.setBabysexIsSet(true);
      }
      if (incoming.get(22)) {
        struct.babysex2 = iprot.readByte();
        struct.setBabysex2IsSet(true);
      }
      if (incoming.get(23)) {
        struct.memberUsername = iprot.readString();
        struct.setMemberUsernameIsSet(true);
      }
      if (incoming.get(24)) {
        struct.company_id = iprot.readI32();
        struct.setCompany_idIsSet(true);
      }
      if (incoming.get(25)) {
        struct.user_type = iprot.readString();
        struct.setUser_typeIsSet(true);
      }
      if (incoming.get(26)) {
        struct.origin = iprot.readString();
        struct.setOriginIsSet(true);
      }
      if (incoming.get(27)) {
        struct.province = iprot.readString();
        struct.setProvinceIsSet(true);
      }
      if (incoming.get(28)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(29)) {
        struct.area = iprot.readString();
        struct.setAreaIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

